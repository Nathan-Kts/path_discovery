CREATE TABLE docker(cgroup VARCHAR, id VARCHAR, "name" VARCHAR, image_name VARCHAR, image_hash VARCHAR);;
CREATE TABLE futex_wait(ts_s TIMESTAMP, pid UINTEGER, tid UINTEGER, futex_key_addr UBIGINT, futex_key_word UBIGINT, futex_key_offset UINTEGER, total_requests UBIGINT, total_time UBIGINT, hist0 UINTEGER, hist1 UINTEGER, hist2 UINTEGER, hist3 UINTEGER, hist4 UINTEGER, hist5 UINTEGER, hist6 UINTEGER, hist7 UINTEGER);;
CREATE TABLE futex_wake(ts_s TIMESTAMP, pid UINTEGER, tid UINTEGER, futex_key_addr UBIGINT, futex_key_word UBIGINT, futex_key_offset UINTEGER, total_requests UBIGINT, successful_count UBIGINT);;
CREATE TABLE k8s(cgroup VARCHAR, id VARCHAR, namespace VARCHAR, pod_name VARCHAR, container_name VARCHAR, image_name VARCHAR);;
CREATE TABLE linux_consts(const_type VARCHAR, const_name VARCHAR, "value" UINTEGER);;
CREATE TABLE process_context(pid UINTEGER, cgroup VARCHAR, argv VARCHAR, exe VARCHAR);;
CREATE TABLE socket_context(inode_id UBIGINT, "family" USMALLINT, "type" USMALLINT, protocol USMALLINT);;
CREATE TABLE socket_inet(inode_id UBIGINT, netns_cookie UBIGINT, src_address VARCHAR, src_port USMALLINT, dst_address VARCHAR, dst_port USMALLINT);;
CREATE TABLE socket_map(sock1_inode_id UBIGINT, sock2_inode_id UBIGINT);;
CREATE TABLE taskstats(ts TIMESTAMP, pid UINTEGER, tid UINTEGER, comm VARCHAR, nvcsw UBIGINT, nivcsw UBIGINT, run_time_total UBIGINT, rq_time_total UBIGINT, rq_count UBIGINT, blkio_time_total UBIGINT, blkio_count UBIGINT, uninterruptible_total UBIGINT, freepages_time_total UBIGINT, freepages_count UBIGINT, thrashing_time_total UBIGINT, thrashing_count UBIGINT, swapin_time_total UBIGINT, swapin_count UBIGINT);;
CREATE TABLE tcp_discovery(local_machine_id UINTEGER, local_inode_id UBIGINT, remote_machine_id UINTEGER, remote_inode_id UBIGINT, inserted_at TIMESTAMP);;
CREATE TABLE vfs(ts_s TIMESTAMP, pid UINTEGER, tid UINTEGER, fs_magic UINTEGER, device_id UINTEGER, inode_id UBIGINT, op UTINYINT, total_time UBIGINT, total_requests UINTEGER, hist0 UINTEGER, hist1 UINTEGER, hist2 UINTEGER, hist3 UINTEGER, hist4 UINTEGER, hist5 UINTEGER, hist6 UINTEGER, hist7 UINTEGER);;
CREATE VIEW taskstats_view AS SELECT ts, time_diff, pid, tid, comm, (run_time / time_diff) AS run_share, (rq_time / time_diff) AS rq_share, (uninterruptible_time / time_diff) AS uninterruptible_share, (blkio_time / time_diff) AS blkio_share, greatest(((time_diff - ((run_time + rq_time) + uninterruptible_time)) / time_diff), 0) AS interruptible_share FROM (SELECT ts, epoch_ns((ts - ts_last)) AS time_diff, pid, tid, comm, (run_time_curr - run_time_last) AS run_time, (rq_time_curr - rq_time_last) AS rq_time, (uninterruptible_time_curr - uninterruptible_time_last) AS uninterruptible_time, (blkio_time_curr - blkio_time_last) AS blkio_time FROM (SELECT ts, lag(ts, 1) OVER (PARTITION BY tid ORDER BY ts) AS ts_last, pid, tid, comm, run_time_total AS run_time_curr, lag(run_time_total, 1) OVER (PARTITION BY tid ORDER BY ts) AS run_time_last, rq_time_total AS rq_time_curr, lag(rq_time_total, 1) OVER (PARTITION BY tid ORDER BY ts) AS rq_time_last, uninterruptible_total AS uninterruptible_time_curr, lag(uninterruptible_total, 1) OVER (PARTITION BY tid ORDER BY ts) AS uninterruptible_time_last, blkio_time_total AS blkio_time_curr, lag(blkio_time_total, 1) OVER (PARTITION BY tid ORDER BY ts) AS blkio_time_last FROM taskstats)) WHERE (time_diff IS NOT NULL);;

